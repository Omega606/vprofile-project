AWSTemplateFormatVersion: "2010-09-09"
Description: "DB Server Template"
Parameters:
  AppStackName:
    Description: Name of the base stack with all infra resources
    Type: String
    Default: app-test
  MyIP:
    Type: String
  KeyName:
    Type: String
  InstanceType:
    Type: String
    Default: t2.small

# CentOS 7 AMI
Mappings:
  AmiRegionMap:
    us-east-1:
      AMI: ami-06cf02a98a61f9f5e
    us-east-2:
      AMI: ami-05a36e1502605b4aa
Resources:
  DB01qaServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        #        Fn::FindInMap:
        - AmiRegionMap
        - !Ref AWS::Region
        - AMI
      Tags:
        - Key: "Name"
          Value: !Join
            - ""
            - - "db01-qa-vpro in "
              - !Ref AWS::Region
      SecurityGroups:
        - !Ref vprodbSG
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          !Sub |
          #!/bin/bash
          DATABASE_PASS='admin123'
          yum update -y
          yum install epel-release -y
          yum install mariadb-server -y
          yum install wget git unzip -y
          
          #mysql_secure_installation
          sed -i 's/^127.0.0.1/0.0.0.0/' /etc/my.cnf
          
          # starting & enabling mariadb-server
          systemctl start mariadb
          systemctl enable mariadb
          
          #restore the dump file for the application
          cd /tmp/
          wget https://raw.githubusercontent.com/devopshydclub/vprofile-repo/vp-rem/src/main/resources/db_backup.sql
          mysqladmin -u root password "$DATABASE_PASS"
          mysql -u root -p"$DATABASE_PASS" -e "UPDATE mysql.user SET Password=PASSWORD('$DATABASE_PASS') WHERE User='root'"
          mysql -u root -p"$DATABASE_PASS" -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
          mysql -u root -p"$DATABASE_PASS" -e "DELETE FROM mysql.user WHERE User=''"
          mysql -u root -p"$DATABASE_PASS" -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"
          mysql -u root -p"$DATABASE_PASS" -e "FLUSH PRIVILEGES"
          mysql -u root -p"$DATABASE_PASS" -e "create database accounts"
          mysql -u root -p"$DATABASE_PASS" -e "grant all privileges on accounts.* TO 'admin'@'localhost' identified by 'admin123'"
          mysql -u root -p"$DATABASE_PASS" -e "grant all privileges on accounts.* TO 'admin'@'%' identified by 'admin123'"
          mysql -u root -p"$DATABASE_PASS" accounts < /tmp/db_backup.sql
          mysql -u root -p"$DATABASE_PASS" -e "FLUSH PRIVILEGES"
          
          # Restart mariadb-server
          systemctl restart mariadb
          # SETUP MEMCACHE
          yum install memcached -y
          systemctl start memcached
          systemctl enable memcached
          systemctl status memcached
          memcached -p 11211 -U 11111 -u memcached -d
          sleep 30
          yum install socat -y
          yum install wget -y
          wget https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_10/rabbitmq-server-3.6.10-1.el7.noarch.rpm
          rpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc
          yum update
          rpm -Uvh rabbitmq-server-3.6.10-1.el7.noarch.rpm
          systemctl start rabbitmq-server
          systemctl enable rabbitmq-server
          systemctl status rabbitmq-server
          echo "[{rabbit, [{loopback_users, []}]}]." > /etc/rabbitmq/rabbitmq.config
          rabbitmqctl add_user test test
          rabbitmqctl set_user_tags test administrator
          systemctl restart rabbitmq-server

  vprodbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: vprodbSG
      GroupDescription: Allow SSH & HTTP from myip
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref MyIP
  vprodbSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId:
        Fn::GetAtt:
          - vprodbSG
          - GroupId
      IpProtocol: -1
      SourceSecurityGroupId:
        Fn::ImportValue:
          Fn::Sub: "${AppStackName}-SGID"
